"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.erase = exports.loadGoogleCalendarId = exports.setGoogleCalendarId = exports.loadGoogleCredentials = exports.setGoogleCredentials = exports.loadAll = exports.load = exports.save = exports.prompt_google_calendar_id = exports.prompt_google_credentials = exports.prompt_credentials = void 0;
const fs_1 = require("fs");
const inquirer_1 = __importDefault(require("inquirer"));
const os_1 = require("os");
const path_1 = __importDefault(require("path"));
const _1 = require(".");
const google_calendar_1 = require("./google-calendar");
const config_path = path_1.default.resolve((0, os_1.homedir)(), '.myges');
async function prompt_credentials() {
    try {
        const { username, password } = await inquirer_1.default.prompt([
            {
                message: 'Username: ',
                name: 'username',
            },
            {
                message: 'Password: ',
                name: 'password',
                type: 'password',
            },
        ]);
        return Object.assign({ username }, (await _1.GesAPI.generateAccessToken(username, password)));
    }
    catch (e) {
        if (e.isTtyError) {
            throw new Error(`Prompt couldn't be rendered in the current environment: ${e.message}`);
        }
        else {
            throw e;
        }
    }
}
exports.prompt_credentials = prompt_credentials;
async function prompt_google_credentials() {
    try {
        const { client_id, client_secret } = await inquirer_1.default.prompt([
            {
                message: "Enter 'client_id' content from credentials.json file downloaded from Google : ",
                name: 'client_id',
            },
            {
                message: "Enter 'client_secret' content from credentials.json file downloaded from Google : ",
                name: 'client_secret',
            },
        ]);
        return {
            installed: {
                client_id,
                client_secret,
            },
        };
    }
    catch (e) {
        if (e.isTtyError) {
            throw new Error(`Prompt couldn't be rendered in the current environment: ${e.message}`);
        }
        else {
            throw e;
        }
    }
}
exports.prompt_google_credentials = prompt_google_credentials;
async function prompt_google_calendar_id() {
    try {
        const { calendar_id } = await inquirer_1.default.prompt([
            {
                message: "(WARNING !) Don't put calendar where you could have other personal events on it ! In that case this tool may erase them...\nEnter your calendar ID : ",
                name: 'calendar_id',
            },
        ]);
        return calendar_id;
    }
    catch (e) {
        if (e.isTtyError) {
            throw new Error(`Prompt couldn't be rendered in the current environment: ${e.message}`);
        }
        else {
            throw e;
        }
    }
}
exports.prompt_google_calendar_id = prompt_google_calendar_id;
async function save(config) {
    return await fs_1.promises.writeFile(config_path, JSON.stringify(config));
}
exports.save = save;
function must_be_logged() {
    console.error('You must be logged in before using that command. (myges login)');
    return process.exit(1);
}
async function load(exit_if_not_logged = false) {
    var _a, _b;
    try {
        const config = await fs_1.promises.readFile(config_path, { encoding: 'utf8' });
        const parsed = JSON.parse(config);
        if (exit_if_not_logged &&
            (!parsed.username ||
                !parsed.access_token ||
                !parsed.token_type ||
                !parsed.expires)) {
            return must_be_logged();
        }
        if (parsed.expires && Date.now() >= parsed.expires) {
            const { password } = await inquirer_1.default.prompt([
                {
                    message: 'Session expired - Enter your password: ',
                    name: 'password',
                    type: 'password',
                },
            ]);
            const info = await _1.GesAPI.generateAccessToken(parsed.username, password);
            parsed.access_token = info.access_token;
            parsed.token_type = info.token_type;
            parsed.expires = Date.now() + parseInt(info.expires_in, 10) * 1000;
            await save(parsed);
        }
        return {
            access_token: (_a = parsed.access_token) !== null && _a !== void 0 ? _a : null,
            token_type: (_b = parsed.token_type) !== null && _b !== void 0 ? _b : null,
        };
    }
    catch (_) {
        if (exit_if_not_logged) {
            return must_be_logged();
        }
        return {
            access_token: null,
            token_type: null,
        };
    }
}
exports.load = load;
async function loadAll() {
    try {
        const config = await fs_1.promises.readFile(config_path, { encoding: 'utf8' });
        const parsed = JSON.parse(config);
        return parsed;
    }
    catch (_) {
        console.error('Error while retrieving config');
        return process.exit(1);
    }
}
exports.loadAll = loadAll;
async function setGoogleCredentials(parsed) {
    parsed.google_api_credentials = await prompt_google_credentials();
    parsed.google_api_token = await (0, google_calendar_1.getGoogleAccessToken)(parsed.google_api_credentials);
    await save(parsed);
    return parsed;
}
exports.setGoogleCredentials = setGoogleCredentials;
async function setGoogleAccessToken(parsed) {
    parsed.google_api_token = await (0, google_calendar_1.getGoogleAccessToken)(parsed.google_api_credentials);
    await save(parsed);
    return parsed;
}
async function loadGoogleCredentials() {
    try {
        const config = await fs_1.promises.readFile(config_path, { encoding: 'utf8' });
        let parsed = JSON.parse(config);
        if (!parsed.google_api_credentials) {
            parsed = await setGoogleCredentials(parsed);
        }
        else if (!parsed.google_api_token) {
            parsed = await setGoogleAccessToken(parsed);
        }
        return {
            google_api_credentials: parsed.google_api_credentials,
            google_api_token: parsed.google_api_token,
        };
    }
    catch (e) {
        console.error('Cannot retrieve google credentials : ' + e);
        process.exit(1);
    }
}
exports.loadGoogleCredentials = loadGoogleCredentials;
async function setGoogleCalendarId(parsed) {
    parsed.google_calendar_id = await prompt_google_calendar_id();
    await save(parsed);
    return parsed.google_calendar_id;
}
exports.setGoogleCalendarId = setGoogleCalendarId;
async function loadGoogleCalendarId() {
    try {
        const config = await fs_1.promises.readFile(config_path, { encoding: 'utf8' });
        const parsed = JSON.parse(config);
        if (!parsed.google_calendar_id) {
            parsed.google_calendar_id = await setGoogleCalendarId(parsed);
        }
        return parsed.google_calendar_id;
    }
    catch (_) {
        return null;
    }
}
exports.loadGoogleCalendarId = loadGoogleCalendarId;
async function erase() {
    return await fs_1.promises.writeFile(config_path, JSON.stringify({}));
}
exports.erase = erase;
