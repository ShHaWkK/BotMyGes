"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const date_fns_1 = require("date-fns");
const inquirer_1 = __importDefault(require("inquirer"));
const commands_base_1 = require("../commands-base");
const configurator = __importStar(require("../config"));
const ges_api_1 = require("../ges-api");
const google_calendar_1 = require("../google-calendar");
function register(program) {
    program
        .command('calendar-sync [days]')
        .option('-r, --reset_credentials', 'reset google api credentials')
        .option('-c, --reset_calendar', 'reset google calendar id')
        .description('sync myges calendar with Google Calendar')
        .action((0, commands_base_1.errorHandler)(action));
}
exports.register = register;
async function action(days, options) {
    try {
        const config = await configurator.load(true);
        let credentials;
        let calendarId;
        if (options.reset_credentials) {
            credentials = await configurator.setGoogleCredentials(await configurator.loadAll());
        }
        else {
            credentials = await configurator.loadGoogleCredentials();
        }
        if (options.reset_calendar) {
            calendarId = await configurator.setGoogleCalendarId(await configurator.loadAll());
        }
        else {
            calendarId = await configurator.loadGoogleCalendarId();
        }
        const api = new ges_api_1.GesAPI(config);
        const now = new Date();
        if (!days) {
            const answers = await inquirer_1.default.prompt([
                {
                    message: 'Choose a number of days',
                    name: 'days',
                    type: 'number',
                    default: 7,
                },
            ]);
            days = answers.days;
        }
        const start = (0, date_fns_1.startOfDay)(now);
        const end = (0, date_fns_1.endOfDay)((0, date_fns_1.addDays)(start, Number.parseInt(days)));
        console.log(`Loading agenda from ${(0, date_fns_1.format)(start, 'dd-MM-yyyy')} to ${(0, date_fns_1.format)(end, 'dd-MM-yyyy')}...`);
        let agenda = await api.getAgenda(start, end);
        if (agenda.length === 0) {
            console.log('Nothing to display in this dates range.');
            console.log('Removing previous events on calendar in given date range...');
            (0, google_calendar_1.removeEvents)(start, end, calendarId, credentials);
            return;
        }
        agenda = agenda
            .sort((a, b) => a.start_date - b.start_date)
            .filter((item, index, agendaArray) => index === 0 ||
            item.reservation_id != agendaArray[index - 1].reservation_id);
        console.log(`Found ${agenda.length} events in this date range`);
        console.log('Removing previous events on calendar in given date range...');
        (0, google_calendar_1.removeEvents)(start, end, calendarId, credentials);
        (0, google_calendar_1.pushToCalendar)(agenda, calendarId, credentials);
    }
    catch (e) {
        if (options.debug) {
            console.error(e);
        }
        else {
            console.error(e.message);
        }
    }
}
